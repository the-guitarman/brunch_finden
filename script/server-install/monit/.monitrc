###############################################################################
## Monit control file
###############################################################################
##
## Comments begin with a '#' and extend through the end of the line. Keywords
## are case insensitive. All path's MUST BE FULLY QUALIFIED, starting with '/'.
##
## Below you will find examples of some frequently used statements. For 
## information about the control file, a complete list of statements and 
## options please have a look in the monit manual.
##
##
###############################################################################
## Global section
###############################################################################
##
## Start monit in the background (run as a daemon) and check services at 
## 2-minute intervals.
set daemon 120

## Logfile
set logfile /var/log/monit.log

## Set syslog logging with the 'daemon' facility. If the FACILITY option is
## omitted, monit will use 'user' facility by default. If you want to log to 
## a stand alone log file instead, specify the path to a log file
#
# set logfile syslog facility log_daemon                       
#
#
## Set the list of mail servers for alert delivery. Multiple servers may be 
## specified using comma separator. By default monit uses port 25 - this
## is possible to override with the PORT option.
#
# set mailserver mail.bar.baz,               # primary mailserver
#                backup.bar.baz port 10025,  # backup mailserver on port 10025
#                localhost                   # fallback relay
set mailserver localhost

#
## By default monit will drop alert events if no mail servers are available. 
## If you want to keep the alerts for a later delivery retry, you can use the 
## EVENTQUEUE statement. The base directory where undelivered alerts will be 
## stored is specified by the BASEDIR option. You can limit the maximal queue
## size using the SLOTS option (if omitted, the queue is limited by space 
## available in the back end filesystem).
#
# set eventqueue
#     basedir /var/monit  # set the base directory where events will be stored
#     slots 100           # optionaly limit the queue size
#
#
## Monit by default uses the following alert mail format:
##
## --8<--
## From: monit@$HOST                         # sender
## Subject: monit alert --  $EVENT $SERVICE  # subject
##
## $EVENT Service $SERVICE                   #
##                                           #
## 	Date:        $DATE                   #
## 	Action:      $ACTION                 #
## 	Host:        $HOST                   # body
## 	Description: $DESCRIPTION            #
##                                           #
## Your faithful employee,                   #
## monit                                     #
## --8<--
##
## You can override this message format or parts of it, such as subject
## or sender using the MAIL-FORMAT statement. Macros such as $DATE, etc.
## are expanded at runtime. For example, to override the sender:
#
# set mail-format { from: monit@foo.bar }
#
#
## You can set alert recipients here whom will receive alerts if/when a 
## service defined in this file has errors. Alerts may be restricted on 
## events by using a filter as in the second example below. 
#
# set alert sysadm@foo.bar                       # receive all alerts
# set alert manager@foo.bar only on { timeout }  # receive just service-
#                                                # timeout alert
set alert brunch-finden@gmx.de
#
#
## Monit has an embedded web server which can be used to view status of 
## services monitored, the current configuration, actual services parameters
## and manage services from a web interface.
#
set httpd port 2812 and
  use address localhost
  allow localhost
  signature disable
#  ssl enable
#  pemfile /etc/ssl/certs/ssl-cert-snakeoil.pem
#  ALLOWSELFCERTIFICATION
#     use address localhost  # only accept connection from localhost
#     allow localhost        # allow localhost to connect to the server and
#     allow gsadmin:monit     # require user 'admin' with password 'monit'
#  allow crypt /etc/apache2/.htpasswd gsadmin
#
#
###############################################################################
## Services
###############################################################################
##
## Check general system resources such as load average, cpu and memory
## usage. Each test specifies a resource, conditions and the action to be
## performed should a test fail.
#
  check system localhost 
    if loadavg (1min) > 30 then alert
    if loadavg (5min) > 25 then alert
    if memory usage > 85% then alert
    if cpu usage (user) > 90% then alert
    if cpu usage (system) > 30% then alert
    if cpu usage (wait) > 30% then alert
#
#    
## Check a file for existence, checksum, permissions, uid and gid. In addition
## to alert recipients in the global section, customized alert will be sent to 
## additional recipients by specifying a local alert handler. The service may 
## be grouped using the GROUP option.
#    
  check file apache_bin with path /usr/sbin/apache2
#    if failed checksum and 
#       expect the sum 8f7f419955cefa0b33a2ba316cba3659 then unmonitor
    if failed permission 755 then unmonitor
    if failed uid root then unmonitor
    if failed gid root then unmonitor
#    alert security@foo.bar on {
#           checksum, permission, uid, gid, unmonitor
#        } with the mail-format { subject: Alarm! }
#    group server
#
#    
## Check that a process is running, in this case Apache, and that it respond
## to HTTP and HTTPS requests. Check its resource usage such as cpu and memory,
## and number of children. If the process is not running, monit will restart 
## it by default. In case the service was restarted very often and the 
## problem remains, it is possible to disable monitoring using the TIMEOUT
## statement. This service depends on another service (apache_bin) which
## is defined above.
#    
  check process apache with pidfile /var/run/apache2.pid 
    start program = "/etc/init.d/apache2 start"
    stop program  = "/etc/init.d/apache2 stop"
    if cpu > 60% for 2 cycles then alert
    if cpu > 80% for 5 cycles then restart
    if totalmem > 400.0 MB for 5 cycles then restart
    if children > 250 then restart
    if loadavg(5min) greater than 10 for 8 cycles then restart 
#    if failed host www.tildeslash.com port 80 protocol http
#       and request "/monit/doc/next.php"
#       then restart
#    if failed port 443 type tcpssl protocol http
#       with timeout 15 seconds
#       then restart
    if 6 restarts within 10 cycles then timeout
    depends on apache_bin
    group server

#check process nginx with pidfile /var/run/nginx.pid
#    start program = "/etc/init.d/nginx start"
#    stop program  = "/etc/init.d/nginx stop"
#    group www-data (for ubuntu, debian)
#    if cpu > 60% for 2 cycles then alert
#    if cpu > 80% for 5 cycles then restart


check process mysql with pidfile /var/run/mysqld/mysqld.pid
  if cpu > 60% for 4 cycles then alert
  group server

#    
#    
## Check device permissions, uid, gid, space and inode usage. Other services,
## such as databases, may depend on this resource and an automatically graceful
## stop may be cascaded to them before the filesystem will become full and data
## lost.
#
#  check device rootfs with path /dev/md2 every 4 cycles
#    start program  = "/bin/mount /data"
#    stop program  = "/bin/umount /data"
#    if failed permission 660 then unmonitor
#    if failed uid root then unmonitor
#    if failed gid disk then unmonitor
#   if space usage > 80% for 5 times within 15 cycles then alert
#    if space usage > 99% then stop
#    if inode usage > 30000 then alert
#    if inode usage > 99% then stop
#    group server
#
#
## Check a file's timestamp. In this example, we test if a file is older 
## than 15 minutes and assume something is wrong if its not updated. Also,
## if the file size exceed a given limit, execute a script
#
#  check file database with path /data/mydatabase.db
#    if failed permission 700 then alert
#    if failed uid data then alert
#    if failed gid data then alert
#    if timestamp > 15 minutes then alert
#    if size > 100 MB then exec "/my/cleanup/script"
#
#
## Check directory permission, uid and gid.  An event is triggered if the 
## directory does not belong to the user with uid 0 and gid 0.  In addition, 
## the permissions have to match the octal description of 755 (see chmod(1)).
#
#  check directory bin with path /bin
#    if failed permission 755 then unmonitor
#    if failed uid 0 then unmonitor
#    if failed gid 0 then unmonitor
#
#
## Check a remote host network services availability using a ping test and 
## check response content from a web server. Up to three pings are sent and 
## connection to a port and a application level network check is performed.
#
#  check host myserver with address 192.168.1.1
#    if failed icmp type echo count 3 with timeout 3 seconds then alert
#    if failed port 3306 protocol mysql with timeout 15 seconds then alert
#    if failed url
#       http://user:password@www.foo.bar:8080/?querystring
#       and content == 'action="j_security_check"'
#       then alert
#
#
###############################################################################
## Includes
###############################################################################
##
## It is possible to include additional configuration parts from other files or
## directories.
#
#  include /etc/monit.d/*
#
#

#check process searchd with pidfile /home/gswww/sites/brunch_finden_de/shared/log/searchd.production.pid

#= Searchd_Monit Config Start ENV:brunch_finden=#
check process brunch_finden_searchd_8000 with pidfile /home/gswww/sites/brunch_finden_de/shared/log/searchd.production.pid
  group sphinx
#  start program = "/bin/su gswww -c 'source /usr/local/rvm/bin/rvm; rvm use ruby-1.8.7-p302@rails238; DIR=/home/gswww/sites/brunch_finden_de/current; /bin/rm $DIR/log/searchd.production.pid; cd $DIR; RAILS_ENV=production rake ts:config; RAILS_ENV=production rake ts:start'"
  start program = "/bin/su gswww -c 'DIR=/home/gswww/sites/brunch_finden_de/current; /bin/rm $DIR/log/searchd.production.pid; /usr/local/bin/searchd --pidfile --config /home/gswww/sites/brunch_finden_de/shared/db/sphinx/production/sphinx.conf'"
#  stop program = "/bin/su gswww -c 'source /usr/local/rvm/bin/rvm; rvm use ruby-1.8.7-p302@rails238; DIR=/home/gswww/sites/brunch_finden_de/current; cd $DIR; RAILS_ENV=production rake ts:config; RAILS_ENV=production rake ts:stop'"
  stop program = "/bin/su gswww -c 'DIR=/home/gswww/sites/brunch_finden_de/current; PID_FILE=$DIR/log/searchd.production.pid; if [ -e $PID_FILE ]; then /bin/kill -9 `/usr/bin/head -n 1 $PID_FILE`; fi;'"

  if failed port 8000 
    with timeout 15 seconds for 2 cycles
    then restart
  if totalmem > 150 Mb then restart
  if 3 restarts within 5 cycles then timeout
#= Searchd_Monit Config End ENV:brunch_finden=#




#= Mongrel_Monit Config Start ENV:brunch_finden=#

check process brunch_finden_mongrel_3000 with pidfile /home/gswww/sites/brunch_finden_de/current/tmp/pids/mongrel.3000.pid
  group mongrel
  start program = "/bin/su gswww -c 'source /usr/local/rvm/bin/rvm; rvm use ruby-1.8.7-p302@rails238; DIR=/home/gswww/sites/brunch_finden_de/current; rm $DIR/tmp/pids/mongrel.3000.pid; MONGREL_RAILS=`which mongrel_rails`; $MONGREL_RAILS start -d -e production -a 127.0.0.1 -c $DIR -p 3000 -P $DIR/tmp/pids/mongrel.3000.pid -l $DIR/log/mongrel.3000.log'"
  stop program = "/bin/su gswww -c 'source /usr/local/rvm/bin/rvm; rvm use ruby-1.8.7-p302@rails238; DIR=/home/gswww/sites/brunch_finden_de/current; MONGREL_RAILS=`which mongrel_rails`; $MONGREL_RAILS stop -P $DIR/tmp/pids/mongrel.3000.pid'"

  if failed host 127.0.0.1 port 3000 protocol http
    with timeout 10 seconds for 5 cycles
    then restart

  if totalmem > 150 Mb then restart
  if cpu is greater than 5% for 2 cycles then alert
  if cpu > 6% for 5 cycles then restart
  #if loadavg(5min) greater than 10 for 8 cycles then restart
  if 3 restarts within 5 cycles then timeout


check process brunch_finden_mongrel_3001 with pidfile /home/gswww/sites/brunch_finden_de/current/tmp/pids/mongrel.3001.pid
  group mongrel
  start program = "/bin/su gswww -c 'source /usr/local/rvm/bin/rvm; rvm use ruby-1.8.7-p302@rails238; DIR=/home/gswww/sites/brunch_finden_de/current; rm $DIR/tmp/pids/mongrel.3001.pid; MONGREL_RAILS=`which mongrel_rails`; $MONGREL_RAILS start -d -e production -a 127.0.0.1 -c $DIR -p 3001 -P $DIR/tmp/pids/mongrel.3001.pid -l $DIR/log/mongrel.3001.log'"
  stop program = "/bin/su gswww -c 'source /usr/local/rvm/bin/rvm; rvm use ruby-1.8.7-p302@rails238; DIR=/home/gswww/sites/brunch_finden_de/current; MONGREL_RAILS=`which mongrel_rails`; $MONGREL_RAILS stop -P $DIR/tmp/pids/mongrel.3001.pid'"

  if failed host 127.0.0.1 port 3001 protocol http
    with timeout 10 seconds for 5 cycles
    then restart

  if totalmem > 150 Mb then restart
  if cpu is greater than 5% for 2 cycles then alert
  if cpu > 6% for 5 cycles then restart
  #if loadavg(5min) greater than 10 for 8 cycles then restart
  if 3 restarts within 5 cycles then timeout

#= Mongrel_Monit Config End ENV:brunch_finden=#



#= Mongrel_Monit Config Start ENV:webistrano=#
check process webistrano_mongrel_3200 with pidfile /home/gsrepo/sites/webistrano/tmp/pids/mongrel.3200.pid
  group mongrel
  start program = "/bin/su gsrepo -c 'source /usr/local/rvm/bin/rvm; rvm use ruby-1.8.7-p302@rails235; DIR=/home/gsrepo/sites/webistrano; rm $DIR/tmp/pids/mongrel.3200.pid; MONGREL_RAILS=`which mongrel_rails`; $MONGREL_RAILS start -d -e production -a 127.0.0.1 -c $DIR -p 3200 -P $DIR/tmp/pids/mongrel.3200.pid -l $DIR/log/mongrel.3200.log'"
  stop program = "/bin/su gsrepo -c 'source /usr/local/rvm/bin/rvm; rvm use ruby-1.8.7-p302@rails235; DIR=/home/gsrepo/sites/webistrano; MONGREL_RAILS=`which mongrel_rails`; $MONGREL_RAILS stop -P $DIR/tmp/pids/mongrel.3200.pid'"

  if failed host 127.0.0.1 port 3200 protocol http
    with timeout 10 seconds for 5 cycles
    then restart

  if totalmem > 150 Mb then restart
  if cpu is greater than 5% for 2 cycles then alert
  if cpu > 6% for 5 cycles then restart
  #if loadavg(5min) greater than 10 for 8 cycles then restart
  if 3 restarts within 5 cycles then timeout

#= Mongrel_Monit Config End ENV:webistrano=#

